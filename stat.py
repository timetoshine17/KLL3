# -*- coding: utf-8 -*-
import re
import torch
import pandas as pd

# 1) ---------------------------------------------------------------
#    전체 로그를 "log" 문자열에 담습니다.
log = """
📄 파일 처리 중: 20210602.txt
✅ 문장 수: 4
✅ 임베딩 shape: torch.Size([4, 1024])
🧠 유사도 행렬:
tensor([[1.0000, 0.5499, 0.5474, 0.6380],
        [0.5499, 1.0000, 0.7004, 0.5588],
        [0.5474, 0.7004, 1.0000, 0.5953],
        [0.6380, 0.5588, 0.5953, 1.0000]])

📄 파일 처리 중: 20210603.txt
✅ 문장 수: 5
✅ 임베딩 shape: torch.Size([5, 1024])
🧠 유사도 행렬:
tensor([[1.0000, 0.6333, 0.5252, 0.7351, 0.5960],
        [0.6333, 1.0000, 0.6580, 0.7359, 0.5070],
        [0.5252, 0.6580, 1.0000, 0.5580, 0.5298],
        [0.7351, 0.7359, 0.5580, 1.0000, 0.6769],
        [0.5960, 0.5070, 0.5298, 0.6769, 1.0000]])


📄 파일 처리 중: 20210902.txt
✅ 문장 수: 4
✅ 임베딩 shape: torch.Size([4, 1024])
🧠 유사도 행렬:
tensor([[1.0000, 0.7017, 0.6264, 0.6004],
        [0.7017, 1.0000, 0.7683, 0.6841],
        [0.6264, 0.7683, 1.0000, 0.6908],
        [0.6004, 0.6841, 0.6908, 1.0000]])

📄 파일 처리 중: 20210903.txt
✅ 문장 수: 5
✅ 임베딩 shape: torch.Size([5, 1024])
🧠 유사도 행렬:
tensor([[1.0000, 0.5376, 0.6235, 0.6238, 0.5000],
        [0.5376, 1.0000, 0.7268, 0.6983, 0.6207],
        [0.6235, 0.7268, 1.0000, 0.6924, 0.6008],
        [0.6238, 0.6983, 0.6924, 1.0000, 0.7462],
        [0.5000, 0.6207, 0.6008, 0.7462, 1.0000]])


📄 파일 처리 중: 20211102.txt
✅ 문장 수: 5
✅ 임베딩 shape: torch.Size([5, 1024])
🧠 유사도 행렬:
tensor([[1.0000, 0.5749, 0.6645, 0.6525, 0.5656],
        [0.5749, 1.0000, 0.7127, 0.5648, 0.6301],
        [0.6645, 0.7127, 1.0000, 0.7252, 0.6298],
        [0.6525, 0.5648, 0.7252, 1.0000, 0.7440],
        [0.5656, 0.6301, 0.6298, 0.7440, 1.0000]])

📄 파일 처리 중: 20211103.txt
✅ 문장 수: 4
✅ 임베딩 shape: torch.Size([4, 1024])
🧠 유사도 행렬:
tensor([[1.0000, 0.5239, 0.5778, 0.5195],
        [0.5239, 1.0000, 0.6000, 0.4583],
        [0.5778, 0.6000, 1.0000, 0.5864],
        [0.5195, 0.4583, 0.5864, 1.0000]])


📄 파일 처리 중: 20220602.txt
✅ 문장 수: 3
✅ 임베딩 shape: torch.Size([3, 1024])
🧠 유사도 행렬:
tensor([[1.0000, 0.6510, 0.6814],
        [0.6510, 1.0000, 0.6705],
        [0.6814, 0.6705, 1.0000]])

📄 파일 처리 중: 20220603.txt
✅ 문장 수: 6
✅ 임베딩 shape: torch.Size([6, 1024])
🧠 유사도 행렬:
tensor([[1.0000, 0.6064, 0.5686, 0.5245, 0.5152, 0.4896],
        [0.6064, 1.0000, 0.7642, 0.6775, 0.6859, 0.5899],
        [0.5686, 0.7642, 1.0000, 0.7131, 0.7359, 0.6306],
        [0.5245, 0.6775, 0.7131, 1.0000, 0.5579, 0.4247],
        [0.5152, 0.6859, 0.7359, 0.5579, 1.0000, 0.5424],
        [0.4896, 0.5899, 0.6306, 0.4247, 0.5424, 1.0000]])

📄 파일 처리 중: 20220901.txt
✅ 문장 수: 5
✅ 임베딩 shape: torch.Size([5, 1024])
🧠 유사도 행렬:
tensor([[1.0000, 0.6047, 0.4330, 0.5422, 0.7030],
        [0.6047, 1.0000, 0.6975, 0.7742, 0.8131],
        [0.4330, 0.6975, 1.0000, 0.6537, 0.5976],
        [0.5422, 0.7742, 0.6537, 1.0000, 0.6262],
        [0.7030, 0.8131, 0.5976, 0.6262, 1.0000]])


📄 파일 처리 중: 20220903.txt
✅ 문장 수: 6
✅ 임베딩 shape: torch.Size([6, 1024])
🧠 유사도 행렬:
tensor([[1.0000, 0.6172, 0.7458, 0.4803, 0.5228, 0.4329],
        [0.6172, 1.0000, 0.6136, 0.5831, 0.6261, 0.6105],
        [0.7458, 0.6136, 1.0000, 0.5744, 0.5678, 0.3627],
        [0.4803, 0.5831, 0.5744, 1.0000, 0.6717, 0.4407],
        [0.5228, 0.6261, 0.5678, 0.6717, 1.0000, 0.4269],
        [0.4329, 0.6105, 0.3627, 0.4407, 0.4269, 1.0000]])


📄 파일 처리 중: 20221102.txt
✅ 문장 수: 4
✅ 임베딩 shape: torch.Size([4, 1024])
🧠 유사도 행렬:
tensor([[1.0000, 0.7131, 0.6209, 0.6590],
        [0.7131, 1.0000, 0.6607, 0.5981],
        [0.6209, 0.6607, 1.0000, 0.5448],
        [0.6590, 0.5981, 0.5448, 1.0000]])

📄 파일 처리 중: 20221103.txt
✅ 문장 수: 4
✅ 임베딩 shape: torch.Size([4, 1024])
🧠 유사도 행렬:
tensor([[1.0000, 0.5767, 0.4940, 0.6083],
        [0.5767, 1.0000, 0.6487, 0.6985],
        [0.4940, 0.6487, 1.0000, 0.7276],
        [0.6083, 0.6985, 0.7276, 1.0000]])


📄 파일 처리 중: 20230602.txt
✅ 문장 수: 5
✅ 임베딩 shape: torch.Size([5, 1024])
🧠 유사도 행렬:
tensor([[1.0000, 0.6663, 0.3987, 0.6382, 0.5357],
        [0.6663, 1.0000, 0.5582, 0.7557, 0.7417],
        [0.3987, 0.5582, 1.0000, 0.5128, 0.4355],
        [0.6382, 0.7557, 0.5128, 1.0000, 0.7906],
        [0.5357, 0.7417, 0.4355, 0.7906, 1.0000]])

📄 파일 처리 중: 20230603.txt
✅ 문장 수: 5
✅ 임베딩 shape: torch.Size([5, 1024])
🧠 유사도 행렬:
tensor([[1.0000, 0.7030, 0.6380, 0.6605, 0.5660],
        [0.7030, 1.0000, 0.6578, 0.6396, 0.7281],
        [0.6380, 0.6578, 1.0000, 0.6068, 0.7070],
        [0.6605, 0.6396, 0.6068, 1.0000, 0.6015],
        [0.5660, 0.7281, 0.7070, 0.6015, 1.0000]])


📄 파일 처리 중: 20230902.txt
✅ 문장 수: 5
✅ 임베딩 shape: torch.Size([5, 1024])
🧠 유사도 행렬:
tensor([[1.0000, 0.6490, 0.7428, 0.7231, 0.6195],
        [0.6490, 1.0000, 0.7807, 0.6901, 0.6555],
        [0.7428, 0.7807, 1.0000, 0.8278, 0.7530],
        [0.7231, 0.6901, 0.8278, 1.0000, 0.7035],
        [0.6195, 0.6555, 0.7530, 0.7035, 1.0000]])

📄 파일 처리 중: 20230903.txt
✅ 문장 수: 5
✅ 임베딩 shape: torch.Size([5, 1024])
🧠 유사도 행렬:
tensor([[1.0000, 0.7548, 0.5604, 0.5919, 0.8445],
        [0.7548, 1.0000, 0.5755, 0.6178, 0.7843],
        [0.5604, 0.5755, 1.0000, 0.6945, 0.5921],
        [0.5919, 0.6178, 0.6945, 1.0000, 0.6417],
        [0.8445, 0.7843, 0.5921, 0.6417, 1.0000]])

📄 파일 처리 중: 20231102.txt
✅ 문장 수: 4
✅ 임베딩 shape: torch.Size([4, 1024])
🧠 유사도 행렬:
tensor([[1.0000, 0.6506, 0.6275, 0.5043],
        [0.6506, 1.0000, 0.4096, 0.4008],
        [0.6275, 0.4096, 1.0000, 0.6917],
        [0.5043, 0.4008, 0.6917, 1.0000]])

📄 파일 처리 중: 20231103.txt
✅ 문장 수: 9
✅ 임베딩 shape: torch.Size([9, 1024])
🧠 유사도 행렬:
tensor([[1.0000, 0.7117, 0.6342, 0.5277, 0.3980, 0.5325, 0.4574, 0.3393, 0.5886],
        [0.7117, 1.0000, 0.6037, 0.5477, 0.4256, 0.5068, 0.4549, 0.4600, 0.5716],
        [0.6342, 0.6037, 1.0000, 0.5805, 0.5419, 0.6542, 0.5677, 0.4035, 0.6029],
        [0.5277, 0.5477, 0.5805, 1.0000, 0.5707, 0.5283, 0.5408, 0.4779, 0.6881],
        [0.3980, 0.4256, 0.5419, 0.5707, 1.0000, 0.6815, 0.6311, 0.6221, 0.5175],
        [0.5325, 0.5068, 0.6542, 0.5283, 0.6815, 1.0000, 0.6696, 0.5200, 0.6310],
        [0.4574, 0.4549, 0.5677, 0.5408, 0.6311, 0.6696, 1.0000, 0.4532, 0.5759],
        [0.3393, 0.4600, 0.4035, 0.4779, 0.6221, 0.5200, 0.4532, 1.0000, 0.4912],
        [0.5886, 0.5716, 0.6029, 0.6881, 0.5175, 0.6310, 0.5759, 0.4912, 1.0000]])
        """
# 2) ---------------------------------------------------------------
def mean_offdiag(mat: torch.Tensor) -> float:
    """대각선을 뺀 평균 유사도 계산"""
    n = mat.size(0)
    return ((mat.sum() - mat.trace()) / (n * (n - 1))).item()

rows = []

# 3) 로그를 "📄 파일 처리 중:" 단위로 분할
sections = re.split(r'📄 파일 처리 중:', log)
for sec in sections[1:]:  # 첫 번째는 헤더 전 공백이므로 건너뜀
    lines = sec.strip().splitlines()
    # 첫 줄에서 파일명 추출
    header = lines[0].strip()
    file_id = header.replace('.txt', '')

    # 해당 섹션에서 'tensor([['로 시작하는 행렬 블록 추출
    tensor_match = re.search(r'tensor\(\[\[(.*?)\]\]\)', sec, re.DOTALL)
    if not tensor_match:
        continue
    matrix_block = tensor_match.group(1)

    # 각 행 문자열들을 추출하고 숫자로 변환
    row_strs = re.findall(r'\[([^\]]+)\]', matrix_block)
    mat_rows = []
    for row in row_strs:
        nums = [float(x) for x in re.findall(r'\d+(?:\.\d+)?', row)]
        if nums:
            mat_rows.append(nums)

    if not mat_rows:
        continue

    mat = torch.tensor(mat_rows)
    rows.append({'file': file_id, 'mean_sim': mean_offdiag(mat)})

# 4) DataFrame 생성
df = pd.DataFrame(rows)
print(df)

# 5) 엑셀 또는 CSV로 저장
output_xlsx = 'mean_similarity_summary.xlsx'
output_csv = 'mean_similarity_summary.csv'
try:
    # openpyxl이 설치되어 있지 않으면 ImportError 발생
    import openpyxl  # noqa
    df.to_excel(output_xlsx, index=False)
    print(f"✔️ '{output_xlsx}' 로 저장되었습니다.")
except ImportError:
    df.to_csv(output_csv, index=False)
    print(f"✔️ 'openpyxl' 패키지가 없어 CSV로 저장: '{output_csv}'")
